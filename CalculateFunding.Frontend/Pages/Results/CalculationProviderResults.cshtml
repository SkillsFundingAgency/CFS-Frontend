@page "{pageNumber?}"
@*@using CalculateFunding.Frontend.Clients.ResultsClient.Models*@
@model CalculateFunding.Frontend.Pages.Results.CalculationProviderResultsPageModel;
@using CalculateFunding.Frontend.ViewModels.Common
@inject Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnv
@using Microsoft.AspNetCore.Hosting
@using CalculateFunding.Frontend.Properties

@{
    ViewData["Title"] = "View calculation provider results";
}

@section NavBar {
    <partial name="_NavbarPartial" />
}

@section BreadCrumb{
    <div class="breadcrumbs">
        <ol>
            <li><a href="~/">@BreadcrumbText.CalculateFunding</a></li>
            <li><a href="/results">@BreadcrumbText.ViewResults</a></li>
            <li><a href="/results/viewcalculationresults">@BreadcrumbText.ViewCalculationResults</a></li>
            <li>@Model.Calculation.Name</li>
        </ol>
    </div>
}

@section BannerLeft{
    <p class="hero-description">@Model.Specification.Name </p>
    <div class="hero-title">
        @Model.Calculation.Name
        <div class="pill"><span class="pill-circle">@Model.Calculation.CalculationType.ToString()[0]</span><span class="pill-text">@Model.Calculation.CalculationType</span></div>
    </div>
}
@section BannerRight{
    @if (Model.Calculation.CalculationType == CalculationTypeViewModel.Additional)
    {
        <a href="/calcs/editAdditionalCalculation/@Model.Calculation.Id" class="view-calc-button float-right">View calculation</a>
    }
    @if (Model.Calculation.CalculationType == CalculationTypeViewModel.Template)
    {
        <a href="/calcs/editTemplateCalculation/@Model.Calculation.Id" class="view-calc-button float-right">View calculation</a>
    }
}
@section BannerMiddle{
    <form method="post" action="/results" class="filter-container spacing-15" data-bind="submit: performSearch" id="filter-container" asp-antiforgery="true">
        <div class="row">
            <div class="col-xs-10 filter-field-heading">Search by provider name, UPIN, UKPRN, URN or establishment number</div>
        </div>
        <div class="row">
            <div class="col-xs-10">
                <div class="input-group">
                    <input type="text" asp-for="SearchTerm" class="form-control" placeholder="Search provider" data-bind="textInput: searchTerm, enable: canSelectFilters" />
                    <div class="input-group-addon"><input id="filter-search-button-image" type="image" src="~/assets/images/icon-search.png" data-bind="enable: canPerformSearch" /></div>
                </div>
            </div>
        </div>
    </form>
}
<div id="notifications-container" class="col-xs-12">
    <div class="notifications-undetermined-panel" data-bind="visible: !currentStatus().jobId" style="display:none;">
        <span class="notifications-undetermined-icon">
            <i class="material-icons">warning</i>
        </span>
        <span>
            Unable to determine the last job that generated these results.
        </span>
        <div class="notifications-panel-bullets">
            <ul>
                <li>This is because the result was pre-existing in the system.</li>
            </ul>
        </div>
    </div>
    <div class="notifications-inprogress-panel" data-bind="visible: currentStatus().jobId && currentStatus().running" style="display:none;">
        <span class="notifications-inprogress-icon">
            <i class="material-icons">warning</i>
        </span>
        <span>
            <span>Calculation is running in the background.</span><span class="float-right notifications-inprogress-status"><span data-bind="text: currentStatus().percentComplete"></span> <img src="~/assets/images/loader.gif" class="notifications-panel-loading-image" /></span>
        </span>
        <div class="notifications-panel-bullets" data-bind="visible: currentStatus">
            <ul>
                <li>The calculation was initiated by <span data-bind="text: currentStatus().invoker"></span> on <span data-bind="text: currentStatus().jobCreatedTimeDisplay"></span></li>
            </ul>
        </div>
    </div>
    <div class="notifications-completed-successful-panel" data-bind="visible: currentStatus().jobId && !currentStatus().running && currentStatus().completedSuccessfully" style="display:none;">
        <span class="notifications-completed-successful-icon">
            <i class="material-icons">check</i>
        </span>
        <span>Calculation completed successfully.</span><span class="float-right"><span class="notifications-completed-successful-status-bold">Results update: </span><span data-bind="text: currentStatus().statusDateTimeDisplay" class="notifications-completed-successful-status"></span></span>
        <div class="notifications-panel-bullets" data-bind="visible: currentStatus">
            <ul>
                <li>The calculation was initiated by <span data-bind="text: currentStatus().invoker"></span> on <span data-bind="text: currentStatus().jobCreatedTimeDisplay"></span></li>
            </ul>
        </div>
    </div>
    <div class="notifications-completed-failed-panel" data-bind="visible: currentStatus().jobId && !currentStatus().running && !currentStatus().completedSuccessfully" style="display:none;">
        <span class="notifications-completed-failed-icon">
            <i class="material-icons">warning</i>
        </span>
        <span>
            Calculation failed to run.
        </span>
        <div class="notifications-panel-bullets" data-bind="visible: currentStatus">
            <ul>
                <li>The calculation was initiated by <span data-bind="text: currentStatus().invoker"></span> on <span data-bind="text: currentStatus().jobCreatedTimeDisplay"></span> is incomplete</li>
                @if (Model.ShowExceptionCountAndFacet)
                {
                    <li id="error-count" data-bind="visible:totalErrorCount() > 0" style="display:none"><span data-bind="text:totalErrorCount"></span><span>&nbsp;provider(s) have calculation <span class="error-highlight">runtime errors</span>, apply "Result status" filter to review errors</span></li>
                }
            </ul>
        </div>
    </div>
</div>
<div class="clearfix"></div>
<form method="post" action="/results" class="filter-container-dropdowns spacing-15" data-bind="submit: performSearch" id="filter-container-dropdowns" asp-antiforgery="true">
    <div class="row spacing-15-top withjs-show" data-bind="visible: searchPerformed">
        @if (Model.ShowExceptionCountAndFacet)
        {
            <div class="col-xs-3 filter-field-heading">Provider type</div>
            <div class="col-xs-3 filter-field-heading">Provider subtype</div>
            <div class="col-xs-3 filter-field-heading">Local authority</div>
            <div class="col-xs-3 filter-field-heading">Results status</div>
        }
        else
        {
            <div class="col-xs-4 filter-field-heading">Provider type</div>
            <div class="col-xs-4 filter-field-heading">Provider subtype</div>
            <div class="col-xs-4 filter-field-heading">Local authority</div>
        }
    </div>
    <div class="row withjs-show" data-bind="visible: searchPerformed">
        @if (Model.ShowExceptionCountAndFacet)
        {
            <div class="col-xs-3">
                <select id="providertype" data-bind="multiselect2: {nonSelectedText: 'Select provider type', buttonWidth: '100%', disableIfEmpty: true}, options: providerType, optionsText: 'displayName', optionsValue: 'name', selectedOptions: selectedProviderTypes, enable: canSelectFilters" multiple></select>
            </div>
            <div class="col-xs-3">
                <select id="providersubtype" data-bind="multiselect2: {nonSelectedText: 'Select provider subtype', buttonWidth: '100%', disableIfEmpty: true}, options: providerSubType, optionsText: 'displayName', optionsValue: 'name', selectedOptions: selectedProviderSubTypes, enable: canSelectFilters" multiple></select>
            </div>
            <div class="col-xs-3">
                <select id="localauthority" data-bind="multiselect2: {nonSelectedText: 'Select local authority', buttonWidth: '100%', disableIfEmpty: true}, options: authority, optionsText: 'displayName', optionsValue: 'name', selectedOptions: selectedLocalAuthorities, enable: canSelectFilters" multiple></select>
            </div>
            <div class="col-xs-3">
                <select id="toggleerrors" data-bind="multiselect2: {buttonWidth: '100%', disableIfEmpty: true}, options: errorToggle, value: selectedErrorToggle, optionsCaption: 'Show All', enable:canSelectErrorToggle"></select>
            </div>
        }
        else
        {
            <div class="col-xs-4">
                <select id="providertype" data-bind="multiselect2: {nonSelectedText: 'Select provider type', buttonWidth: '100%', disableIfEmpty: true}, options: providerType, optionsText: 'displayName', optionsValue: 'name', selectedOptions: selectedProviderTypes, enable: canSelectFilters" multiple></select>
            </div>
            <div class="col-xs-4">
                <select id="providersubtype" data-bind="multiselect2: {nonSelectedText: 'Select provider subtype', buttonWidth: '100%', disableIfEmpty: true}, options: providerSubType, optionsText: 'displayName', optionsValue: 'name', selectedOptions: selectedProviderSubTypes, enable: canSelectFilters" multiple></select>
            </div>
            <div class="col-xs-4">
                <select id="localauthority" data-bind="multiselect2: {nonSelectedText: 'Select local authority', buttonWidth: '100%', disableIfEmpty: true}, options: authority, optionsText: 'displayName', optionsValue: 'name', selectedOptions: selectedLocalAuthorities, enable: canSelectFilters" multiple></select>
            </div>

        }
    </div>
</form>
<div class="row providers-search">


    <div class="col-xs-12" id="providers-search-container">
        <partial name="_SearchFilterPartial" />
        <partial name="_SearchErrorPartial" />

        @if (!Model.HasProviderDatasetsAssigned)
        {
            <div class="provider-datasets-warning-container spacing-15-bottom">
                <i class="material-icons">warning</i> <span>No dataset has been set as provider data. This may affect results.</span>
            </div>
        }
        else
        {
            <div data-bind="visible: isResultsVisible">
                <partial name="_SearchPagerPartial_ProviderResults" model='new PagerPartialViewModel(Model.CalculationProviderResults, "providers", Model.SearchTerm)' />
            </div>
            <div class="row" data-bind="visible: !searchPerformed()">
                <div class="provider-item-property-container">
                    <span> Provider </span>
                    <span> Funding  </span>
                </div>
            </div>
            <div class="providers-searchresult-container" data-bind="visible: !searchPerformed()">
                @{
                    int providerRow = 0;
                }

                @foreach (var provider in Model.CalculationProviderResults.CalculationProviderResults)
                {
                    <div class="provider-item-container" id="provider-item-result-@providerRow">
                        <div class="provider-item-header">
                            @if (!string.IsNullOrWhiteSpace(provider.CalculationExceptionType))
                            {
                                <span class="float-right error-highlight"><strong>Error</strong></span>
                            }
                            else
                            {
                                <span class="float-right"><strong>@provider.AsDisplay(Model.Calculation.ValueType)</strong></span>
                            }
                            <h4 class="heading-small"><a href="/results/ProviderCalcsResults?providerId=@provider.ProviderId&periodId=@Model.Specification.FundingPeriod.Id&specificationProviderVersion=@(Model.Calculation.SpecificationId + "_" + Model.Specification.ProviderVersionId)">@provider.ProviderName</a></h4>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(provider.CalculationExceptionType))
                        {
                            <div class="provider-item-property-container">
                                <span class="provider-item-property provider-item-property-date-opened">
                                    <strong>
                                        <span class="error-highlight" id="provider-item-exception-@providerRow">@provider.CalculationExceptionMessage</span>
                                    </strong>
                                </span>
                            </div>
                        }
                        <div class="provider-item-property-container">
                            <span class="provider-item-property provider-item-property-last-updated">
                                Updated:
                                <strong>
                                    <span id="provider-item-last-updated-@providerRow">
                                        @Model.Calculation.LastModified.ToString(Helpers.FormatStrings.DateFullMonthFormatString)
                                    </span>
                                </strong>
                            </span>
                        </div>
                        <div class="provider-item-property-container">
                            <span class="provider-item-property provider-item-property-upin">
                                UPIN:
                                <strong>
                                    <span id="provider-item-upin-@providerRow">
                                        @(!string.IsNullOrWhiteSpace(provider.UPIN) ? provider.UPIN.ToString() : "No data found")
                                    </span>
                                </strong>
                            </span>
                            <span class="provider-item-property provider-item-property-ukprn">
                                UKPRN:
                                <strong>
                                    <span id="provider-item-ukprn-@providerRow">
                                        @(!string.IsNullOrWhiteSpace(provider.UKPRN) ? provider.UKPRN.ToString() : "No data found")

                                    </span>
                                </strong>
                            </span>
                            <span class="provider-item-property provider-item-property-urn">
                                URN:
                                <strong>
                                    <span id="provider-item-urn-@providerRow">
                                        @(!string.IsNullOrWhiteSpace(provider.URN) ? provider.URN.ToString() : "No data found")
                                    </span>
                                </strong>
                            </span>
                            <span class="provider-item-property provider-item-property-estab-num">
                                Establishment number:
                                <strong>
                                    <span id="provider-item-establishmentnumber-@providerRow">
                                        @(!string.IsNullOrWhiteSpace(provider.EstablishmentNumber) ? provider.EstablishmentNumber.ToString() : "No data found")
                                    </span>
                                </strong>
                            </span>
                        </div>
                        <div class="provider-item-property-container">
                            <span class="provider-item-property provider-item-property-providertype">
                                Provider type:
                                <strong>
                                    <span id="provider-item-providertype-@providerRow">@provider.ProviderType</span>
                                </strong>
                            </span>
                            <span class="provider-item-property provider-item-property-provider">
                                &nbsp;Provider subtype:
                                <strong>
                                    <span id="provider-item-providersubtype-@providerRow">@provider.ProviderSubType</span>
                                </strong>
                            </span>
                        </div>
                        <div class="provider-item-property-container">
                            <span class="provider-item-property provider-item-property-local-authority">
                                Local authority:
                                <strong>
                                    <span id="provider-item-localauthority-@providerRow">@provider.LocalAuthority</span>
                                </strong>
                            </span>
                        </div>
                        <div class="provider-item-property-container">
                            <span class="provider-item-property provider-item-property-date-opened">
                                Date Opened:
                                <strong>
                                    <span id="provider-item-dateopened-@providerRow">@provider.DateOpenedDisplay</span>
                                </strong>
                            </span>
                        </div>
                    </div>
                    providerRow++;
                }
            </div>
        }
        <div class="providers-searchresult-header row spacing-30-top" data-bind="visible: isResultsVisible()">
            <div class="col-xs-12">
                <span> <strong>Provider</strong></span>
                @* TODO this needs sorting *@
                @*<span class="float-right">
                        @if (Model.Calculation.CalculationType == CalculationTypeViewModel.Funding)
                        {
                            <strong>Total funding</strong>

                        }
                        else if (Model.Calculation.CalculationType == CalculationTypeViewModel.Number)
                        {
                            <strong>Total value</strong>
                        }
                    </span>*@
            </div>
        </div>
        <div data-bind="visible: isResultsVisible">
            <div class="providers-searchresult-container withjs-show" data-bind="foreach: providerSearchResults">
                <div class="provider-item-container " data-bind="attr: {'id' : 'provider-item-result-' +$index() },  css: { 'validation-failed-block' : calculationExceptionType != ''}">
                    <div class="provider-item-header">
                        <strong><span class="float-right" data-bind="text: !calculationExceptionType ? calculationResultDisplay : 'Error', css: {'results-in-progress' : $root.areResultsBeingUpdated() === true, 'error-highlight':calculationExceptionType}"></span></strong>
                        <img src="~/assets/images/loader.gif" data-bind="visible: $root.areResultsBeingUpdated()" class="float-right notifications-panel-loading-image" />
                        @if (Model.Calculation.CalculationType == CalculationTypeViewModel.Additional)
                        {
                            <h4 class="heading-small"><a data-bind="attr: {href: '/results/ProviderAdditionalCalculations?providerId=' + providerId + '&fundingPeriodId=' + $root.fundingPeriodId + '&specificationProviderVersion=' + $root.specificationId + '_' + $root.providerVersionId }, text: name"></a></h4>
                        }
                        @if (Model.Calculation.CalculationType == CalculationTypeViewModel.Template)
                        {
                            <h4 class="heading-small"><a data-bind="attr: {href: '/results/ProviderTemplateCalculations?providerId=' + providerId + '&fundingPeriodId=' + $root.fundingPeriodId + '&specificationProviderVersion=' + $root.specificationId + '_' + $root.providerVersionId }, text: name"></a></h4>
                        }
                    </div>
                    <div>
                        <span class="provider-item-property error-highlight" data-bind="visible: calculationExceptionType != ''">
                            <strong><span data-bind="text: calculationExceptionMessage, attr: { 'id' :'provider-item-exception-'+$index() }"> </span></strong>
                        </span>
                    </div>
                    <div>
                        <span class="provider-item-property">
                            Updated: <strong><span>@Model.Calculation.LastModified.ToString(Helpers.FormatStrings.DateFullMonthFormatString)</span></strong>
                        </span>
                    </div>
                    <div>
                        <span class="provider-item-property">
                            UKPRN:<strong> <span data-bind="text: ukprn != '' ? ukprn : 'No data found', attr:{ 'id' : 'provider-item-ukprn-' +$index()}"></span></strong>
                        </span>
                    </div>
                    <div>
                        <span class="provider-item-property">
                            Provider type:&nbsp;<strong><span data-bind="text: providerType, attr: { 'id' : 'provider-item-providertype-'+$index() }"></span></strong>
                        </span>
                    </div>
                    <div>
                        <span class="provider-item-property">
                            Local authority:&nbsp;<strong><span data-bind="text: localAuthority, attr: { 'id' : 'provider-item-localauthority-'+$index() }"></span></strong>
                        </span>
                    </div>
                    <div>
                        <span class="provider-item-property">
                            Date Opened:&nbsp;<strong><span data-bind="text: dateOpenedDisplay, attr: { 'id' :'provider-item-dateopened-'+$index() }"> </span></strong>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="withjs-show search-loading-container" data-bind="visible: isLoading">
            <img src="~/assets/images/loader.gif" alt="Loading" />
            <p>Loading Provider Results</p>
        </div>

        @if (Model.HasProviderDatasetsAssigned && Model.CalculationProviderResults.CalculationProviderResults.AnyWithNullCheck())
        {
            <noscript>
                <div class="noresults-panel spacing-30">
                    <span class="noresults-panel-text">
                        <i class="material-icons">warning</i> No results. Check when the calculation was last run, or check its code and the datasets it uses.
                    </span>
                </div>
            </noscript>
        }

        <div class="noresults-panel spacing-30 withjs-show" data-bind="visible: providerSearchResults().length === 0 && searchPerformed()">
            <span class="noresults-panel-text">
                <i class="material-icons">warning</i> No results. Check when the calculation was last run, or check its code and the datasets it uses.
            </span>
        </div>
    </div>
</div>

@section scripts{
    <script asp-src-include="~/assets/libs/js/knockout-latest.js" asp-append-version="true" type="text/javascript"></script>
    @if (!hostingEnv.IsDevelopment())
    {
        <script asp-src-include="~/assetsjs/bootstrap-multiselect-*.js" asp-append-version="true" type="text/javascript"></script>
    }
    else
    {
        <script asp-src-include="~/assets/js/bootstrap-multiselect.js" asp-append-version="true" type="text/javascript"></script>
    }
    <script asp-src-include="~/js/bindingHandler.multiselect.js" asp-append-version="true" type="text/javascript"></script>
    <script asp-src-include="~/js/search.js" asp-append-version="true" type="text/javascript"></script>

    <script asp-src-include="~/js/search.calculationProviderResults.js" asp-append-version="true" type="text/javascript"></script>

    <script type="text/javascript">
        var searchVM = new calculateFunding.results.listCalulationProviderResults.ProviderSearchViewModel({ calculationValueType: '@Model.Calculation.ValueType.ToString()', calculationId: '@Model.Calculation.Id', specificationId: '@Model.Specification.Id', providerVersionId: '@Model.Specification.ProviderVersionId', fundingPeriodId: '@Model.Specification.FundingPeriod?.Id', doSearch: @Model.HasProviderDatasetsAssigned.ToString().ToLower() });
        var filterElement = document.getElementById("filter-container");
        if (filterElement) {
            ko.applyBindings(searchVM, filterElement);
        }
        var filterElementDropdowns = document.getElementById("filter-container-dropdowns");
        if (filterElementDropdowns) {
            ko.applyBindings(searchVM, filterElementDropdowns);
        }


        var providerResultsContainer = document.getElementById("providers-search-container");
        if (providerResultsContainer) {
            ko.applyBindings(searchVM, providerResultsContainer);
        }

        searchVM.performSearch();

    </script>

    <script asp-src-include="~/assets/libs/js/signalr.min.js" asp-append-version="true" type="text/javascript"></script>
    <script asp-src-include="~/js/notifications.js" asp-append-version="true" type="text/javascript"></script>

    <script type="text/javascript">
        var precedingJobTypes = [ 'MapDatasetJob' ];
        var notificationsVM = new calculateFunding.notifications.SearchNotificationsViewModel('@Model.Specification.Id', @Html.Raw(Model.LatestJobJson), searchVM, 'CreateInstructAllocationJob', precedingJobTypes);

        var notificationsContainer = document.getElementById("notifications-container");
        if (notificationsContainer != null) {
            ko.applyBindings(notificationsVM, notificationsContainer);
        }
    </script>
}

@section styles{
    <link rel="stylesheet" asp-href-include="~/assets/libs/css/bootstrap-multiselect.css" asp-append-version="true" />
}
