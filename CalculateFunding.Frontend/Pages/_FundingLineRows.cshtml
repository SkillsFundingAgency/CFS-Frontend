@using CalculateFunding.Frontend.ViewModels.Specs
@using Common.ApiClient.Calcs.Models
@model CalculateFunding.Frontend.ViewModels.Specs.FundingLineViewModel

@if (!Model.FundingLines.IsNullOrEmpty())
{
    @foreach (var fundingLine in Model.FundingLines)
    {
        <tr>
            <td colspan="2">Funding line</td>
            <td>@fundingLine.Name</td>
            <td></td>
            <td></td>
        </tr>
        @if (!fundingLine.Calculations.IsNullOrEmpty())
        {
            int rowCount = fundingLine.Calculations.Count();
            int counter = 1;
            foreach (var calculation in fundingLine.Calculations)
            {

                CalculationMetadata calculationMetadata = Model.Calculations?.FirstOrDefault(m => string.Equals(m.Name, calculation.Name, StringComparison.CurrentCultureIgnoreCase));


                @if (calculationMetadata != null)
                {
                    <tr>
                        <td class="grey-border-cell"></td>
                        @if (counter == 1)
                        {
                            <td class="calc-spec-title-cell" rowspan="@rowCount">Template Calculation Specification</td>
                        }
                        <td>
                            <a href="/calcs/editTemplateCalculation/@calculationMetadata.CalculationId">@calculationMetadata.Name</a>
                        </td>
                        <td>
                            @calculationMetadata.ValueType
                        </td>
                        <td>
                            @calculationMetadata.PublishStatus

                        </td>
                    </tr>
                    counter++;
                }

            }
        }


        <partial name="_FundingLineRows" model="@(new FundingLineViewModel
        {
            Calculations = Model.Calculations,
            FundingLines = fundingLine.FundingLines,
            BorderThicknessMultiplier = Model.BorderThicknessMultiplier + 1
        })" />
    }
}
