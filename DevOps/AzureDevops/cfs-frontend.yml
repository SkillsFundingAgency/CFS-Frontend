name: $(Rev:r)

pool:
  vmImage: windows-2022

trigger:
  branches:
    include:
    - master
    - providers
    - fdps

variables:
- name: BuildConfiguration
  value: release
- name: BuildPlatform
  value: 'any cpu'
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: '1'
- name: 'projectFolder'
  value: 'CalculateFunding.Web/calculatefunding-web'
- name: vstsFeed
  value: 'ecf37bc0-472b-47bf-91e3-6774809fd194' 
- group: 'Dotnet Core SDK Version'

jobs:
  - job:
    displayName: 'Build, test and publish'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 14.x'
      inputs:
        versionSpec: 14.x

    - powershell: |
        cd '${{ variables.projectFolder }}'
        Write-host "========================= Installing Yarn Packages  ========================="
        yarn install --silent
        Write-host "========================= Audit packages  ========================="
        yarn install --audit
      displayName: "Run yarn install"

    - powershell: |
        cd '${{ variables.projectFolder }}'
        $targetBranch = $env:SYSTEM_PULLREQUEST_TARGETBRANCH -replace "refs/heads/"

        Write-Host "========================= Running PR checks ========================="
        Write-Host "Checking for differences between $targetBranch and current branch"

        $mergeCommitHash = git merge-base HEAD origin/$targetBranch
        Write-Host "Finding typescript changes between this branch and the current head (commit hash $mergeCommitHash)"

        $changedFiles = @(git diff --name-only $mergeCommitHash --diff-filter=d -- "*.ts" "*.tsx")

        if($changedFiles.Count -gt 0) {
          $truncatedChangedFiles = @($changedFiles | ForEach-Object { $_ -replace "CalculateFunding.Web/calculatefunding-web/", "" })

          Write-Host "Changed files:"
          Write-Host @truncatedChangedFiles

          Write-Host "Running ESLint over changed files"

          node .\node_modules\eslint\bin\eslint.js @truncatedChangedFiles
        } else {
          Write-Host "Skipping eslint step as no files were changed..."
        }
        Write-Host "Running typescript compiler..."
        node .\node_modules\typescript\bin\tsc --noEmit
        echo  "========================= Finished running PR checks ========================="
        
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      displayName: "Run PR checks"

    - powershell: |
        cd '${{ variables.projectFolder }}'
        $env:CI = "true"
        Write-host "========================= Yarn test ========================="
        yarn test
        Write-host "========================= Finished test ========================="
      displayName: 'Run Yarn Test site'

    - task: PublishTestResults@2
      displayName: 'Publish React Test Results as test-report.xml'
      inputs:
        testResultsFiles: 'test-report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)\${{ variables.projectFolder }}'
        testRunTitle: 'React Test _$(Build.BuildNumber)'
      continueOnError: true  

    - powershell: |
        cd '${{ variables.projectFolder }}'
        Write-host "========================= Yarn build ========================="
        $env:CI = "false"
        yarn run build
        Write-host "========================= Finished build ========================="
      displayName: 'Run Yarn build site'

    - task: CopyFiles@2
      displayName: 'Copy Files to: CalculateFunding.Frontend/wwwroot/app'
      inputs:
        SourceFolder: '${{ variables.projectFolder }}/Build'
        TargetFolder: CalculateFunding.Frontend/wwwroot/app

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk $(DotnetCoreSdkVersion)'
      inputs:
        version: '6.0.100'

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'
        vstsFeed: '$(vstsFeed)'

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory) /p:AssemblyVersion=$(Build.BuildNumber)'

    - task: CopyFiles@2
      displayName: 'Copy DevOps Files to: $(build.artifactstagingdirectory)/DevOps/'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        SourceFolder: DevOps
        Contents: '**/*.ps1'
        TargetFolder: '$(build.artifactstagingdirectory)/DevOps'

    - task: CopyFiles@2
      displayName: 'Copy Azure Template Files to: $(build.artifactstagingdirectory)/azure'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        SourceFolder: azure
        Contents: '**/*.*'
        TargetFolder: '$(build.artifactstagingdirectory)/azure'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'